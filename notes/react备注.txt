1、组件名称必须以大写字母开头。
例如，<div /> 表示一个DOM标签，但 <Welcome /> 表示一个组件，并且在使用该组件时你必须定义或引入它。

2、JSX语法中 某些html属性
例如，class 变成了 className，而 tabindex 则对应着 tabIndex。

3、不应该依靠当前值来计算下一个状态的值，因为this.props和this.state可能是异步更新的

必须如此的话，setState方法 接收一个函数而不是一个对象
this.setState((prevState, props) => ({
  counter: prevState.counter + props.increment
}));


4、事件处理，跟传统html差不多 onclick=> onClick。 事件绑定属性变成了驼峰写法

事件中的this指向问题， react中需要手动绑定。 
在constructor中
// This binding is necessary to make `this` work in the callback
this.handleClick = this.handleClick.bind(this);


5、做if判断
{
	{unreadMessages.length > 0 &&
        	<h2>
          You have {unreadMessages.length} unread messages.
        </h2>
      }

{ conditoin ? component1 : component2 }

JSX允许在大括号中嵌入任何表达式， 所以，上述大括号中也可以写Array.map等

6、form表单
react中数据是单向绑定的，即从数据 => dom元素
所以inut,select,checkbox等受控组件上 需要监听onChange，然后调用setState，达到dom输入和数据的一致

所以，受控组件 是 表单数据由react组件处理。
如果让表单数据由dom处理时， 替代方案为使用非受控组件

通过ref从dom获取表单值，支持设置默认值: defaultValue或者defaultChecked
<input type="text" ref={(input) => this.input = input} />

特殊：
<input type="file" />始终是一个不受控制的组件，因为他的值只能为用户设置
ref={input => { this.fileInput = input; }}  => this.fileInput.files[0].name

7、jsx组合(vue中slot)
组件标签中间的自定义内容，默认是在组件的 props.children中。
有多个自定义入口的情况下
(
    <SplitPane
      left={
        <Contacts />
      }
      right={
        <Chat />
      } />
  ) => props.left|props.right

8、一般使用不到继承
如果要在组件之间复用 UI 无关的功能，我们建议将其提取到单独的 JavaScript 模块中。这样可以在不对组件进行扩展的前提下导入并使用该函数、对象或类
