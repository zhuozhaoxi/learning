1、组件名称必须以大写字母开头。
例如，<div /> 表示一个DOM标签，但 <Welcome /> 表示一个组件，并且在使用该组件时你必须定义或引入它。

2、JSX语法中 某些html属性
例如，class 变成了 className，而 tabindex 则对应着 tabIndex。

3、不应该依靠当前值来计算下一个状态的值，因为this.props和this.state可能是异步更新的

必须如此的话，setState方法 接收一个函数而不是一个对象
this.setState((prevState, props) => ({
  counter: prevState.counter + props.increment
}));


4、事件处理，跟传统html差不多 onclick=> onClick。 事件绑定属性变成了驼峰写法

事件中的this指向问题， react中需要手动绑定。 
在constructor中
// This binding is necessary to make `this` work in the callback
this.handleClick = this.handleClick.bind(this);


5、做if判断
{
	{unreadMessages.length > 0 &&
        	<h2>
          You have {unreadMessages.length} unread messages.
        </h2>
      }

{ conditoin ? component1 : component2 }

JSX允许在大括号中嵌入任何表达式， 所以，上述大括号中也可以写Array.map等

6、form表单
react中数据是单向绑定的，即从数据 => dom元素
所以inut,select,checkbox等受控组件上 需要监听onChange，然后调用setState，达到dom输入和数据的一致

所以，受控组件 是 表单数据由react组件处理。
如果让表单数据由dom处理时， 替代方案为使用非受控组件

特殊：
<input type="file" />始终是一个不受控制的组件，因为他的值只能为用户设置
ref={input => { this.fileInput = input; }}  => this.fileInput.files[0].name

通过函数式ref从dom获取表单值，支持设置默认值: defaultValue或者defaultChecked
<input type="text" ref={(input) => this.input = input} />  => this.input.current指向input dom元素
React v16.3 引入 React.createRef()
constructor中 => this.input = React.createRef();
render中 =>	<div ref={this.input} />;

7、jsx组合(vue中slot)
组件标签中间的自定义内容，默认是在组件的 props.children中。
有多个自定义入口的情况下
(
    <SplitPane
      left={
        <Contacts />
      }
      right={
        <Chat />
      } />
  ) => props.left|props.right

通常情况下，插入 JSX 中的 JavaScript 表达式将被认作字符串、React 元素或这些内容的列表。
然而，props.children 可以像其它属性一样传递任何数据，而不仅仅是 React 元素。
甚至可以是一个函数，如下，props.children接收了一个函数
<Repeat numTimes={10}>
      {(index) => <div key={index}>This is item {index} in the list</div>}
</Repeat>

特殊值
false、null、undefined 和 true 都是有效的子代，但它们不会直接被渲染， 想要渲染需转换成字符串

8、一般使用不到继承
如果要在组件之间复用 UI 无关的功能，我们建议将其提取到单独的 JavaScript 模块中。这样可以在不对组件进行扩展的前提下导入并使用该函数、对象或类

9、关于函数式组件
没有生命周期，没有state，不能在函数式组件上使用 ref 属性，因为它们没有实例，但是可以在函数式组件内部使用 ref，只要它指向一个 DOM 元素或者 class 组件

10、通过React.forwardRef函数来获取子组件的元素
React.forwardRef接收一个函数，该函数接收两个参数，props，ref（父组件的ref值），返回一个可渲染的结果

11、关于HOC（高阶组件） （备注：这点vue好像做不来）
其实就是一个函数，接收一个组件作为参数，组合一些功能返回另外一个组件

12、react可以通过Protals将渲染结果 渲染到父节点以外的地方

13、react没有watch
组件本身的state改变由组件本身掌控，所以找到对应的地方添加状态更改后的需要对应执行的操作。
对于props, 可以在组件的生命周期componentWillReceiveProps()|getDerivedStateFromProps()中处理