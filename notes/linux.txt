进程查看
ps -ef | grep xxxx


// 动态查看文件更改
tail -f



系统内存不足时  no space left on device
// 查看磁盘内存占用情况
df -h

// 查看磁盘iNode节点占用情况
df -ih


// 查看文件所占内存大小
du -sh *

// 一般是找到比较大的日志文件， 进行删除

// 进一步查找问题。 
// 如果文件正在被进程使用， 并不会被立即删除， 打上deleted标记并等进程执行完毕后删除
// 通过以下命令查找
slot | grep deleted


1、如何生成密钥，并使用私钥登录linux服务器

ssh-keygen -t rsa
-t  rsa    是指采用rsa加密方式的公钥/私钥对。
第一行:提示公钥私钥存放地址
第二行:给私钥设置密码，回车则无密码
第三行:确认密码

生成完毕后，进入对应的目录 如: /root/.ssh/
将公钥追加到authorized_keys文件中
cat id_rsa.pub >> authorized_keys
chmod 600 authorized_keys

下载私钥 id_rsa

最后  配置文件中 /etc/ssh/sshd_config
设置 PasswordAuthentication yes

总结：在配置过程中，忘记cat id_rsa.pub >> authorized_keys，会导致下载私钥之后也不能登录服务器。

免密登录
将A服务器的公钥增加到B服务器的authorized_keys中
A可以免密登录B。（换言之，任何拿着A的私钥的服务器都可以免密登录B）

2、重启gitlab-runner

第一种 使用服务
install、uninstall、start、stop、restart、status这6个命令就是和服务相关的。
//先stop停止服务
gitlab-runner  stop

// 卸载已经加载的runner配置， 
gitlab-ci-multi-runner uninstall 

// 重新加载
gitlab-ci-multi-runner install  --service gitlab-runner --user=gitlab-runner --config /etc/gitlab-runner/config.toml --working-directory /home/gitlab-runner

// 重新启动
gitlab-ci-multi-runner start // 在后台启动

// 使用verify 确认启动情况

第二种
 // 放到了前台执行
gitlab-ci-multi-runner run --config 配置文件路径 --service 指定服务别名 --working-directory 批量运行服务的工作目录 --user 以什么用户权限运行runner
--syslog 如果指定了这个选项，则把日志记录到系统日志


3、gitlab 指定服务器免密码， 将指定服务器的公钥 添加到gitlab的仓库中即可

4、linux的环境变量
当前用户 /user/.bashrc
source ~/.bashrc
每打开一个shell, 都会加载/导入到shell中， 形成当前shell的临时环境变量

变量可以通过unset清除

4.1当前shell的临时环境变量， 能被自己及其子进程(子shell进程, 子脚本进程或者子C程序进程)访问

4.2普通变量，shell内自己定义的变量，没有export
shell中的普通变量很简单， 仅能被当前shell访问

4.3 .bashrc 和 /etc/profile的区别 参考： https://blog.csdn.net/m0_37739193/article/details/72638074
bash_profile/profile: 所有用户的登录shell
bashrc: 针对用户打开的非登陆shell

/etc目录下为全体用户生效
~/ 目录下为当前用户生效

/etc/profile: 此文件为系统的每个用户设置环境信息,当用户第一次登录时,该文件被执行.并从/etc/profile.d目录的配置文件中搜集shell的设置.
/etc/bashrc:  为每一个运行bash shell的用户执行此文件.当bash shell被打开时,该文件被读取.
~/.bash_profile: 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次!默认情况下,他设置一些环境变量,执行用户的.bashrc文件.
~/.bashrc: 该文件包含专用于你的bash shell的bash信息,当登录时以及每次打开新的shell时,该该文件被读取.
~/.bash_logout: 当每次退出系统(退出bash shell)时,执行该文件.

视shell种类情况加载不同的配置文件
登录Shell(不管是不是交互式的)文件加载顺序如下:

/etc/profile
~/.bash_profile
~/.bash_login
~/.profile

注： .profile(由Bourne Shell和Korn Shell使用)和.login(由C Shell使用)两个文件是.bash_profile的同义词，目的是为了兼容其它Shell

交互式非登录Shell文件加载顺序如下：

/etc/bashrc
~/.bashrc
